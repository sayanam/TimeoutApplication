#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Feb 25, 2020 10:11:33 PM IST  platform: Windows NT

import sys
import random
from ServiceLayer.TimeoutService import TimeoutService as TS
from TransferObjects.PlaylistData import VideoInfo
from ExceptionPackage import TimeOutCustomException as exceptCust
from threading import Timer

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from tkinter import messagebox

ts = TS()
userName = ts.get_windows_username()
playlistData = ts.playListData
userHistoryData = ts.userHistoryData

def set_Tk_var():
    global spinbox
    spinbox = tk.StringVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root, Scrolledlistbox1
    w = gui
    top_level = top
    root = top

def Shuffle():
    print('TimeoutApplicationUISupport.Shuffle')
    random.shuffle(playlistData)
    rePopulatePlayListBoxWithListElements()

def rePopulatePlayListBoxWithListElements():
    w.Scrolledlistbox1.delete(0, tk.END)
    playlistData = ts.get_playlist_data()
    lenPlaylistData = len(playlistData)
    for i in range(0, lenPlaylistData):
        w.Scrolledlistbox1.insert(tk.END, playlistData[i].songname)
    sys.stdout.flush()

def rePopulateHistoryBox():
    userHistoryData = ts.get_user_history()
    lenUserHistoryData = len(userHistoryData)
    w.Scrolledlistbox2.delete(0, tk.END)
    for i in range(0, lenUserHistoryData):
        temp = userHistoryData[i].date + '  ' + userHistoryData[i].action + '  ' + userHistoryData[i].itemName
        w.Scrolledlistbox2.insert(tk.END, temp)
    sys.stdout.flush()


def UploadUrl():
    try:
        print("In upload url")
        url = str(w.TEntry1.get())
        songName = ts.uploadUrl(url)
        if songName != '':
            #w.Scrolledlistbox1.insert(tk.END,songName)
            w.TEntry1.delete(0, tk.END)
            #playlistData.append(VideoInfo(songName, url))
            rePopulatePlayListBoxWithListElements()
            rePopulateHistoryBox()
            messagebox.showinfo('Upload Successful !!', 'Song added to playlist successfully!!')
    except exceptCust.Invalid_Url:
        messagebox.showerror('Invalid Url', 'The entered URL is invalid !!')
    except exceptCust.GeneralException:
        print(exceptCust.GeneralException)
        messagebox.showerror('Internal Error', 'Error Occurred please contact the application admin')

def deletePlaylistElements():
    print('In method TimeoutApplicationUISupport.deletePlaylistElements')
    selectedElements = w.Scrolledlistbox1.curselection()
    for element in selectedElements:
        ts.deletePlaylistItem(playlistData[element].songname)
        playlistData.pop(element)
        w.Scrolledlistbox1.delete(element)
    # refer http://effbot.org/tkinterbook/listbox.htm
    rePopulateHistoryBox()
    sys.stdout.flush()


def start_recursion():
    url = w.Scrolledlistbox1.get(0)
    ts.openURLInBrowser(url)
    lenPlaylistData = len(playlistData)
    temp = playlistData[0]
    for i in range(0, lenPlaylistData -1):
        playlistData[i] = playlistData[i + 1]
    playlistData[lenPlaylistData-1] = temp
    rePopulatePlayListBoxWithListElements()
    start()

def start():
    print('TimeoutApplicationUISupport.start')
    interval = int(w.Spinbox1.get())
    global threadTimerVar
    threadTimerVar = Timer(interval, start_recursion) ## This is in seconds
    threadTimerVar.start()
    sys.stdout.flush()

def stop():
    print('in method TimeoutApplicationUISupport.stop')
    if threadTimerVar.is_alive():
        print('Stopping thread from execution')
        threadTimerVar.cancel()# Cancel mearly kills the time of occurance, the thread is still active
    sys.stdout.flush()

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import TimeoutApplicationUI
    TimeoutApplicationUI.vp_start_gui()
