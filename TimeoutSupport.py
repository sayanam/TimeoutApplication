#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.2
#  in conjunction with Tcl version 8.6
#    Feb 25, 2020 10:11:33 PM IST  platform: Windows NT

import sys
import random
from ServiceLayer.TimeoutService import TimeoutService as TS
from TransferObjects.PlaylistData import VideoInfo
from ExceptionPackage import TimeOutCustomException as exceptCust
from threading import Timer

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from tkinter import messagebox

ts = TS()
userName = ts.get_windows_username()
playlistData = ts.playListData
userHistoryData = ts.userHistoryData

def set_Tk_var():
    global spinbox
    spinbox = tk.StringVar()

def init(top, gui, *args, **kwargs):
    global w, top_level, root, Scrolledlistbox1, timeCounter
    w = gui
    top_level = top
    root = top
    timeCounter = 0

def Shuffle():
    print('TimeoutSupport.Shuffle')
    playlistData = ts.get_playlist_data()
    random.shuffle(playlistData)
    rePopulatePlayListBoxWithListElements(playlistData)

def rePopulatePlayListBoxWithListElements(playlistData):
    w.Scrolledlistbox1.delete(0, tk.END)
    lenPlaylistData = len(playlistData)
    for i in range(0, lenPlaylistData):
        w.Scrolledlistbox1.insert(tk.END, playlistData[i].songname)
    sys.stdout.flush()

def rePopulateHistoryBox():
    userHistoryData = ts.get_user_history()
    lenUserHistoryData = len(userHistoryData)
    w.Scrolledlistbox2.delete(0, tk.END)
    for i in range(0, lenUserHistoryData):
        temp = userHistoryData[i].date + '  ' + userHistoryData[i].action + '  ' + userHistoryData[i].itemName
        w.Scrolledlistbox2.insert(tk.END, temp)
    sys.stdout.flush()

def checkIFUrlAlreadyExists(url):
    for playlist in playlistData:
        if playlist.urladdress == url:
            return True
    return False

def UploadUrl():
    try:
        print("In upload url")
        url = str(w.TEntry1.get())
        if checkIFUrlAlreadyExists(url):
            raise exceptCust.UrlAlreadyExists
        songName = ts.uploadUrl(url)
        if songName != '':
            w.TEntry1.delete(0, tk.END)
            global playlistData
            playlistData = ts.get_playlist_data()
            rePopulatePlayListBoxWithListElements(playlistData)
            rePopulateHistoryBox()
            messagebox.showinfo('Upload Successful !!', 'Url added to playlist successfully!!')
    except exceptCust.UrlAlreadyExists:
        messagebox.showerror('Url Exists', 'The entered URL is already added to playlist !!')
    except exceptCust.Invalid_Url:
        messagebox.showerror('Invalid Url', 'The entered URL is invalid !!')
    except exceptCust.GeneralException:
        print(exceptCust.GeneralException)
        messagebox.showerror('Internal Error', 'Error Occurred please contact the application admin')

def deletePlaylistElements():
    print('In method TimeoutSupport.deletePlaylistElements')
    selectedElements = w.Scrolledlistbox1.curselection()
    for element in selectedElements:
        ts.deletePlaylistItem(playlistData[element].songname)
        playlistData.pop(element)
        w.Scrolledlistbox1.delete(element)
    # refer http://effbot.org/tkinterbook/listbox.htm
    rePopulateHistoryBox()
    sys.stdout.flush()

def getIntervalValue():
    try:
        return int(w.Spinbox1.get())
    except ValueError:
        return 10

'''
Logic written only for seconds. Minutes are not implemented
'''
def displayTimer(min, sec):
    timeDisplayFormat = 'mm:ss'
    timeToDisplay = ''
    if sec > 9:
        timeToDisplay = timeDisplayFormat.replace('mm', '00').replace('ss', str(sec))
    else:
        timeToDisplay = timeDisplayFormat.replace('mm', '00').replace('ss', '0' + str(sec))
    w.TimerLabel['text'] = timeToDisplay


def start():
    print('TimeoutSupport.start')
    global timeCounter
    interval = getIntervalValue()
    mm = 00
    print('Interval',interval)
    print('timeCounter', timeCounter)
    ss = interval - timeCounter
    timeCounter += 1
    displayTimer(mm, ss)
    if timeCounter == interval:
        timeCounter = 0
        #url = w.Scrolledlistbox1.get(0)
        ts.openURLInBrowser(playlistData[0].urladdress)
        lenPlaylistData = len(playlistData)
        temp = playlistData[0]
        for i in range(0, lenPlaylistData - 1):
            playlistData[i] = playlistData[i + 1]
        playlistData[lenPlaylistData - 1] = temp
        rePopulatePlayListBoxWithListElements(playlistData)
    global recurssiveThread
    recurssiveThread = Timer(1, start)
    recurssiveThread.start()

def stop():
    print('in method TimeoutSupport.stop')
    try:
        if recurssiveThread.is_alive():
            print('Stopping thread from execution')
            recurssiveThread.cancel()# Cancel mearly kills the time of occurance, the thread is still active
            displayTimer(00,00)
    except NameError:
        print('Thread not yet created !!')
    sys.stdout.flush()


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import TimeoutSupport
    TimeoutSupport.vp_start_gui()
